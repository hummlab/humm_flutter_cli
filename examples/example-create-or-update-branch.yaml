name: Create or Update Next Release Branch

on:
  pull_request:
    branches:
      - develop
    types:
      - closed

jobs:
  handle-releases:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set up Git configuration
      - name: Setup Git Config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      # 3. Detect branch details
      - name: Detect Branch Details
        id: detect_branches
        run: |
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          MERGED_BRANCH="${{ github.event.pull_request.head.ref }}"

          # Determine the component (app or panel) and version
          if [[ "$MERGED_BRANCH" == releases/app/* ]]; then
            COMPONENT="app"
          elif [[ "$MERGED_BRANCH" == releases/panel/* ]]; then
            COMPONENT="panel"
          else
            echo "Unknown branch type. Exiting..."
            exit 1
          fi

          VERSION=$(echo "$MERGED_BRANCH" | grep -oE '[0-9]+\.[0-9]+')
          if [ -z "$VERSION" ]; then
            echo "Could not extract version. Exiting..."
            exit 1
          fi

          echo "component=$COMPONENT" >> $GITHUB_ENV
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_ENV
          echo "merged_branch=$MERGED_BRANCH" >> $GITHUB_ENV
          echo "merged_version=$VERSION" >> $GITHUB_ENV

      # 4. Check for the next release branch
      - name: Check for Next Release Branch
        id: check_next_release
        run: |
          CURRENT_VERSION="${{ env.merged_version }}"
          MINOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f2)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d'.' -f1)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="${MAJOR}.${NEXT_MINOR}"
          NEXT_BRANCH="releases/${{ env.component }}/${NEXT_VERSION}.x"

          # Check if the next branch already exists
          if git ls-remote --exit-code --heads origin "$NEXT_BRANCH"; then
            echo "next_branch_exists=true" >> $GITHUB_ENV
          else
            echo "next_branch_exists=false" >> $GITHUB_ENV
            echo "next_branch=${NEXT_BRANCH}" >> $GITHUB_ENV
          fi

      # 5. Create the next release branch
      - name: Create Next Release Branch
        if: env.next_branch_exists == 'false'
        run: |
          git checkout -b "${{ env.next_branch }}"
          PUBSPEC_FILE="${{ env.component }}/pubspec.yaml"

          if [ ! -f "$PUBSPEC_FILE" ]; then
            echo "Error: $PUBSPEC_FILE does not exist."
            exit 1
          fi

          # Update version in pubspec.yaml
          sed -i "s/^version: [0-9]\+\.[0-9]\+\.[0-9]\+\(\+[0-9]\+\)\?/version: ${{ env.next_version }}.0+1/" "$PUBSPEC_FILE"

          git add "$PUBSPEC_FILE"
          git commit -m "Bump version to ${{ env.next_version }}"
          git push origin "${{ env.next_branch }}"

      # 6. Create pull requests to higher branches
      - name: Create Pull Requests to Higher Branches
        if: env.next_branch_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_BRANCH="${{ env.base_branch }}"
          CURRENT_VERSION="${{ env.merged_version }}"
          git fetch --all
          HIGHER_BRANCHES=$(git branch -r | grep -E "origin/releases/${{ env.component }}/[0-9]+\.[0-9]+\.x")

          for BRANCH in $HIGHER_BRANCHES; do
            gh pr create \
              --base "$BRANCH" \
              --head "$BASE_BRANCH" \
              --title "Sync changes from $BASE_BRANCH to $BRANCH" \
              --body "This PR syncs updates from $BASE_BRANCH into $BRANCH."
          done
